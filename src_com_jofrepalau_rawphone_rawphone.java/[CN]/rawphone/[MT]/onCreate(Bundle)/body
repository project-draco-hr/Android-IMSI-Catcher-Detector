{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  String imei, imeiv, phonenum, sCellId, sLAC, snetname, smmcmcc, sphonetype, simcountry, simoperator, simoperatorname, simserial, simsubs, sdataactivity;
  int dataactivity;
  sCellId="undef";
  sLAC="undef";
  smmcmcc="undef";
  snetname="undef";
  snettype="undef";
  sphonetype="undef";
  isTrackingCell=false;
  isTrackingLocation=false;
  isTrackingSignal=false;
  isAbout=false;
  cellinfo="[0,0]|nn|nn|";
  signalinfo=0;
  lac=0;
  cellid=0;
  slng=0.0;
  slat=0.0;
  alPosition=new ArrayList<String>();
  myDB=null;
  try {
    myDB=this.openOrCreateDatabase(DB_NAME,MODE_PRIVATE,null);
    myDB.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE_NAME + " (_id INTEGER primary key autoincrement, Lac INTEGER, CellID INTEGER, Net VARCHAR, Lat VARCHAR, Lng VARCHAR, Signal INTEGER, Connection VARCHAR, Timestamp TIMESTAMP NOT NULL DEFAULT current_timestamp);");
  }
 catch (  SQLiteException se) {
    Log.e(getClass().getSimpleName(),"Could not create or Open the database:" + se);
    myDB=null;
  }
  notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  int icon=R.drawable.iconbn;
  CharSequence text="Starting RawPhone...";
  CharSequence contentTitle="RawPhone";
  CharSequence contentText="Bring RawPhone to the foreground.";
  long when=System.currentTimeMillis();
  PendingIntent contentIntent=PendingIntent.getActivity(this,0,this.getIntent(),0);
  Notification notification=new Notification(icon,text,when);
  notification.setLatestEventInfo(this,contentTitle,contentText,contentIntent);
  notificationManager.notify(9999,notification);
  tm=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  outputView=(TextView)findViewById(R.id.view);
  outputView.setHorizontalFadingEdgeEnabled(false);
  outputView.setText("Information:\n\n");
  imei=tm.getDeviceId();
  imeiv=tm.getDeviceSoftwareVersion();
  phonenum=tm.getLine1Number();
  nettype=tm.getNetworkType();
switch (nettype) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
    snettype="Unknown";
  break;
case TelephonyManager.NETWORK_TYPE_GPRS:
snettype="GPRS";
break;
case TelephonyManager.NETWORK_TYPE_EDGE:
snettype="EDGE";
break;
case TelephonyManager.NETWORK_TYPE_UMTS:
snettype="UMTS";
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
snettype="HSPA";
break;
case TelephonyManager.NETWORK_TYPE_HSUPA:
snettype="HDSPA";
break;
case TelephonyManager.NETWORK_TYPE_HSPA:
snettype="HUSPA";
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
snettype="CDMA";
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
snettype="EVDO_0";
break;
case TelephonyManager.NETWORK_TYPE_EVDO_A:
snettype="EVDO_A";
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
snettype="1xRTT";
break;
default :
snettype="Unknown";
break;
}
phonetype=tm.getPhoneType();
switch (phonetype) {
case TelephonyManager.PHONE_TYPE_GSM:
sphonetype="GSM";
smmcmcc=tm.getNetworkOperator();
snetname=tm.getNetworkOperatorName();
GsmCellLocation gsmCellLocation=(GsmCellLocation)tm.getCellLocation();
if (gsmCellLocation != null) {
sCellId="" + gsmCellLocation.getCid();
sLAC="" + gsmCellLocation.getLac();
}
simcountry=tm.getSimCountryIso();
simoperator=tm.getSimOperator();
simoperatorname=tm.getSimOperatorName();
simserial=tm.getSimSerialNumber();
simsubs=tm.getSubscriberId();
outputView.append("SIM country:    " + simcountry + "\n");
outputView.append("SIM Op ID:      " + simoperator + "\n");
outputView.append("SIM Op Name:    " + simoperatorname + "\n");
outputView.append("SIM IMSI:       " + simsubs + "\n");
outputView.append("SIM serial:     " + simserial + "\n\n");
break;
case TelephonyManager.PHONE_TYPE_CDMA:
sphonetype="CDMA";
break;
}
outputView.append("Device type:    " + sphonetype + "\n");
outputView.append("Device IMEI:    " + imei + "\n");
outputView.append("Device version: " + imeiv + "\n");
outputView.append("Device num:     " + phonenum + "\n\n");
outputView.append("Network name:   " + snetname + "\n");
outputView.append("Network code:   " + smmcmcc + "\n");
outputView.append("Network type:   " + snettype + "\n");
outputView.append("Network LAC:    " + sLAC + "\n");
outputView.append("Network CellID: " + sCellId + "\n\n");
dataactivity=tm.getDataActivity();
sdataactivity="undef";
switch (dataactivity) {
case TelephonyManager.DATA_ACTIVITY_NONE:
sdataactivity="None";
break;
case TelephonyManager.DATA_ACTIVITY_IN:
sdataactivity="In";
break;
case TelephonyManager.DATA_ACTIVITY_OUT:
sdataactivity="Out";
break;
case TelephonyManager.DATA_ACTIVITY_INOUT:
sdataactivity="In-Out";
break;
case TelephonyManager.DATA_ACTIVITY_DORMANT:
sdataactivity="Dormant";
break;
}
outputView.append("Data activity:  " + sdataactivity + "\n");
dataactivity=tm.getDataState();
sdataactivity="undef";
switch (dataactivity) {
case TelephonyManager.DATA_DISCONNECTED:
sdataactivity="Disconnected";
break;
case TelephonyManager.DATA_CONNECTING:
sdataactivity="Connecting";
break;
case TelephonyManager.DATA_CONNECTED:
sdataactivity="Connected";
break;
case TelephonyManager.DATA_SUSPENDED:
sdataactivity="Suspended";
break;
}
outputView.append("Data status:    " + sdataactivity + "\n");
signalListenerlocation=new PhoneStateListener(){
public void onCellLocationChanged(CellLocation location){
nettype=tm.getNetworkType();
switch (nettype) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
snettype="Unknown";
break;
case TelephonyManager.NETWORK_TYPE_GPRS:
snettype="GPRS";
break;
case TelephonyManager.NETWORK_TYPE_EDGE:
snettype="EDGE";
break;
case TelephonyManager.NETWORK_TYPE_UMTS:
snettype="UMTS";
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
snettype="HDSPA";
break;
case TelephonyManager.NETWORK_TYPE_HSUPA:
snettype="HSUPA";
break;
case TelephonyManager.NETWORK_TYPE_HSPA:
snettype="HSPA";
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
snettype="CDMA";
break;
case TelephonyManager.NETWORK_TYPE_EVDO_0:
snettype="EVDO_0";
break;
case TelephonyManager.NETWORK_TYPE_EVDO_A:
snettype="EVDO_A";
break;
case TelephonyManager.NETWORK_TYPE_1xRTT:
snettype="1xRTT";
break;
default :
snettype="Unknown";
break;
}
int dataactivity=tm.getDataActivity();
String sdataactivity="un";
switch (dataactivity) {
case TelephonyManager.DATA_ACTIVITY_NONE:
sdataactivity="No";
break;
case TelephonyManager.DATA_ACTIVITY_IN:
sdataactivity="In";
break;
case TelephonyManager.DATA_ACTIVITY_OUT:
sdataactivity="Ou";
break;
case TelephonyManager.DATA_ACTIVITY_INOUT:
sdataactivity="IO";
break;
case TelephonyManager.DATA_ACTIVITY_DORMANT:
sdataactivity="Do";
break;
}
int datastate=tm.getDataState();
String sdatastate="un";
switch (datastate) {
case TelephonyManager.DATA_DISCONNECTED:
sdatastate="Di";
break;
case TelephonyManager.DATA_CONNECTING:
sdatastate="Ct";
break;
case TelephonyManager.DATA_CONNECTED:
sdatastate="Cd";
break;
case TelephonyManager.DATA_SUSPENDED:
sdatastate="Su";
break;
}
switch (phonetype) {
case TelephonyManager.PHONE_TYPE_GSM:
GsmCellLocation gsmCellLocation=(GsmCellLocation)location;
if (gsmCellLocation != null) {
cellinfo=gsmCellLocation.toString() + sdataactivity + "|"+ sdatastate+ "|"+ snettype+ "|";
lac=gsmCellLocation.getLac();
cellid=gsmCellLocation.getCid();
outputView.append(cellinfo + signalinfo + "["+ slng+ "|"+ slat+ "\n");
kmlpoints(lac,cellid,cellinfo,slng,slat);
}
;
break;
case TelephonyManager.PHONE_TYPE_CDMA:
CdmaCellLocation cdmaCellLocation=(CdmaCellLocation)location;
if (cdmaCellLocation != null) {
cellinfo=cdmaCellLocation.toString().toString() + sdataactivity + "|"+ sdatastate+ "|"+ snettype+ "|";
lac=cdmaCellLocation.getNetworkId();
cellid=cdmaCellLocation.getBaseStationId();
outputView.append(cellinfo + signalinfo + "["+ slng+ "|"+ slat+ "\n");
kmlpoints(lac,cellid,cellinfo,slng,slat);
}
;
}
SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMdd-HHmmss");
java.util.Date date=new java.util.Date();
String datetime=dateFormat.format(date);
insertrow(lac,cellid,nettype,slat,slng,signalinfo,cellinfo);
csv+=lac + "," + cellid+ ","+ snettype+ ","+ slat+ ","+ slng+ ","+ signalinfo+ ","+ datetime+ "\n";
}
}
;
signalListenerstrength=new PhoneStateListener(){
public void onSignalStrengthsChanged(SignalStrength signalStrength){
switch (phonetype) {
case TelephonyManager.PHONE_TYPE_GSM:
signalinfo=signalStrength.getGsmSignalStrength();
break;
case TelephonyManager.PHONE_TYPE_CDMA:
signalinfo=signalStrength.getCdmaDbm();
break;
default :
signalinfo=0;
}
outputView.append(cellinfo + signalinfo + "["+ slng+ "|"+ slat+ "\n");
kmlpoints(lac,cellid,cellinfo,slng,slat);
insertrow(lac,cellid,nettype,slat,slng,signalinfo,cellinfo);
SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMdd-HHmmss");
java.util.Date date=new java.util.Date();
String datetime=dateFormat.format(date);
csv+=lac + "," + cellid+ ","+ snettype+ ","+ slat+ ","+ slng+ ","+ signalinfo+ ","+ datetime+ "\n";
}
}
;
kmlheader();
csv="LAC,CellID,NetType,LAT,LNG,Strength\n";
outputView.append("--------------------------------\n");
outputView.append("[LAC,CID]|DAct|DStat|Net|Sig|Lat|Lng\n");
Log.i("rawphone","Device type   : " + sphonetype);
Log.i("rawphone","Device imei   : " + imei);
Log.i("rawphone","Device version: " + imeiv);
Log.i("rawphone","Device num    : " + phonenum);
Log.i("rawphone","Network type  : " + snettype);
Log.i("rawphone","Network CellID: " + sCellId);
Log.i("rawphone","Network LAC   : " + sLAC);
Log.i("rawphone","Network code  : " + smmcmcc);
Log.i("rawphone","Network name  : " + snetname);
}
