{
  NavDrawerItem selectedItem=mNavConf.getNavItems().get(position);
  String title=selectedItem.getLabel();
switch (selectedItem.getId()) {
case DrawerMenu.ID.MAIN.PHONE_SIM_DETAILS:
    openFragment(deviceFragment);
  title=getString(R.string.app_name_short);
break;
case DrawerMenu.ID.MAIN.CURRENT_TREAT_LEVEL:
openFragment(cellInfoFragment);
title=getString(R.string.app_name_short);
break;
case DrawerMenu.ID.MAIN.AT_COMMAND_INTERFACE:
openFragment(atCommandFragment);
title=getString(R.string.app_name_short);
break;
case DrawerMenu.ID.MAIN.DB_VIEWER:
openFragment(dbViewerFragment);
title=getString(R.string.app_name_short);
break;
case DrawerMenu.ID.APPLICATION.UPLOAD_LOCAL_BTS_DATA:
new RequestTask(this,com.SecUpwN.AIMSICD.utils.RequestTask.DBE_UPLOAD_REQUEST).execute("");
break;
case DrawerMenu.ID.MAIN.ANTENNA_MAP_VIEW:
openFragment(mapFragment);
title=getString(R.string.app_name_short);
break;
case DrawerMenu.ID.SETTINGS.BACKUP_DB:
new RequestTask(this,RequestTask.BACKUP_DATABASE).execute();
break;
}
if (selectedItem.getId() == DrawerMenu.ID.SETTINGS.RESTORE_DB) {
if (CellTracker.LAST_DB_BACKUP_VERSION < AIMSICDDbAdapter.DATABASE_VERSION) {
Helpers.msgLong(this,getString(R.string.unable_to_restore_backup_from_previous_database_version));
}
 else {
new RequestTask(this,RequestTask.RESTORE_DATABASE).execute();
}
}
 else if (selectedItem.getId() == DrawerMenu.ID.SETTINGS.RESET_DB) {
Helpers.askAndDeleteDb(this);
}
 else if (selectedItem.getId() == DrawerMenu.ID.APPLICATION.DOWNLOAD_LOCAL_BTS_DATA) {
downloadBtsDataIfApiKeyAvailable();
}
 else if (selectedItem.getId() == DrawerMenu.ID.MAIN.ALL_CURRENT_CELL_DETAILS) {
if (CellTracker.OCID_API_KEY != null && !CellTracker.OCID_API_KEY.equals("NA")) {
StringBuilder sb=new StringBuilder();
sb.append("http://www.opencellid.org/cell/get?key=").append(CellTracker.OCID_API_KEY);
if (mAimsicdService.getCell().getMCC() != Integer.MAX_VALUE) {
sb.append("&mcc=").append(mAimsicdService.getCell().getMCC());
}
if (mAimsicdService.getCell().getMNC() != Integer.MAX_VALUE) {
sb.append("&mnc=").append(mAimsicdService.getCell().getMNC());
}
if (mAimsicdService.getCell().getLAC() != Integer.MAX_VALUE) {
sb.append("&lac=").append(mAimsicdService.getCell().getLAC());
}
if (mAimsicdService.getCell().getCID() != Integer.MAX_VALUE) {
sb.append("&cellid=").append(mAimsicdService.getCell().getCID());
}
sb.append("&format=xml");
Request request=new Request.Builder().url(sb.toString()).get().build();
okHttpClient.newCall(request).enqueue(new Callback(){
@Override public void onFailure(Request request,IOException e){
}
@Override public void onResponse(Response response) throws IOException {
try {
List<Cell> cellList=new StackOverflowXmlParser().parse(response.body().byteStream());
AIMSICD.this.processFinish(cellList);
}
 catch (XmlPullParserException e) {
e.printStackTrace();
}
}
}
);
}
 else {
Helpers.sendMsg(this,getString(R.string.no_opencellid_key_detected));
}
}
 else if (selectedItem.getId() == DrawerMenu.ID.APPLICATION.QUIT) {
try {
if (mAimsicdService.isSmsTracking()) {
mAimsicdService.stopSmsTracking();
}
}
 catch (Exception ee) {
log.warn("Exception in smstracking module: " + ee.getMessage());
}
if (mAimsicdService != null) {
mAimsicdService.onDestroy();
}
log.info("Closing db from DrawerMenu.ID.APPLICATION.QUIT");
new AIMSICDDbAdapter(getApplicationContext()).close();
finish();
}
mDrawerList.setItemChecked(position,true);
if (selectedItem.updateActionBarTitle()) {
setTitle(title);
}
if (this.mDrawerLayout.isDrawerOpen(this.mDrawerList)) {
mDrawerLayout.closeDrawer(mDrawerList);
}
}
