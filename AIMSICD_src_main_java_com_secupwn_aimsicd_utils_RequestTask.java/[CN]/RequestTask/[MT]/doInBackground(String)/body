{
switch (mType) {
case DBE_UPLOAD_REQUEST:
    try {
      boolean prepared=mDbAdapter.prepareOpenCellUploadData();
      log.info("OCID upload data prepared - " + String.valueOf(prepared));
      if (prepared) {
        File file=new File((mAppContext.getExternalFilesDir(null) + File.separator) + "OpenCellID/aimsicd-ocid-data.csv");
        publishProgress(25,100);
        RequestBody requestBody=new MultipartBuilder().type(MultipartBuilder.FORM).addFormDataPart("key",CellTracker.OCID_API_KEY).addFormDataPart("datafile","aimsicd-ocid-data.csv",RequestBody.create(MediaType.parse("text/csv"),file)).build();
        Request request=new Request.Builder().url("http://www.opencellid.org/measure/uploadCsv").post(requestBody).build();
        publishProgress(60,100);
        Response response=okHttpClient.newCall(request).execute();
        publishProgress(80,100);
        if (response != null) {
          log.info("OCID Upload Response: " + response.code() + " - "+ response.message());
          if (response.code() == 200) {
            mDbAdapter.ocidProcessed();
          }
          publishProgress(95,100);
        }
        return "Successful";
      }
 else {
        Helpers.msgLong(mAppContext,mAppContext.getString(R.string.no_data_for_publishing));
        return null;
      }
    }
 catch (    UnsupportedEncodingException e) {
      log.error("Upload OpenCellID data Exception",e);
    }
catch (    FileNotFoundException e) {
      log.error("Upload OpenCellID data Exception",e);
    }
catch (    IOException e) {
      log.error("Upload OpenCellID data Exception",e);
    }
catch (    Exception e) {
      log.error("Upload OpenCellID data Exception",e);
    }
case DBE_DOWNLOAD_REQUEST:
  mTimeOut=REQUEST_TIMEOUT_MENU;
case DBE_DOWNLOAD_REQUEST_FROM_MAP:
int count;
try {
long total;
int progress=0;
String dirName=getOCDBDownloadDirectoryPath(mAppContext);
File dir=new File(dirName);
if (!dir.exists()) {
  dir.mkdirs();
}
File file=new File(dir,OCDB_File_Name);
log.info("DBE_DOWNLOAD_REQUEST write to: " + dirName + OCDB_File_Name);
Request request=new Request.Builder().url(commandString[0]).get().build();
Response response;
try {
  okHttpClient.setReadTimeout(60,TimeUnit.SECONDS);
  response=okHttpClient.newCall(request).execute();
  okHttpClient.setReadTimeout(10,TimeUnit.SECONDS);
}
 catch (SocketTimeoutException e) {
  log.warn("Trying to talk to OCID timed out after 60 seconds. API is slammed? Throttled?");
  return "Timeout";
}
if (response.code() != 200) {
  try {
    String error=response.body().string();
    Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_error) + " " + error);
    log.error("Download OCID data error: " + error);
  }
 catch (  Exception e) {
    Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_error) + " " + e.getClass().getName()+ " - "+ e.getMessage());
    log.error("Download OCID exception: ",e);
  }
  return "Error";
}
 else {
  total=response.body().contentLength();
  if (total == -1) {
    log.debug("doInBackground DBE_DOWNLOAD_REQUEST total not returned!");
    total=1024;
  }
 else {
    log.debug("doInBackground DBE_DOWNLOAD_REQUEST total: " + total);
    publishProgress((int)(0.25 * total),(int)total);
  }
  FileOutputStream output=new FileOutputStream(file,false);
  InputStream input=new BufferedInputStream(response.body().byteStream());
  byte[] data=new byte[1024];
  while ((count=input.read(data)) > 0) {
    output.write(data,0,count);
    progress+=count;
    publishProgress(progress,(int)total);
  }
  input.close();
  output.flush();
  output.close();
}
return "Successful";
}
 catch (IOException e) {
log.warn("Problem reading data from steam",e);
return null;
}
case BACKUP_DATABASE:
if (mDbAdapter.backupDB()) {
return "Successful";
}
return null;
case RESTORE_DATABASE:
if (mDbAdapter.restoreDB()) {
return "Successful";
}
return null;
}
return null;
}
