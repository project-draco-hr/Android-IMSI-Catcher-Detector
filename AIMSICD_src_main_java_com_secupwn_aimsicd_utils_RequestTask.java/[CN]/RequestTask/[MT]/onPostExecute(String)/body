{
  super.onPostExecute(result);
  TinyDB tinydb=TinyDB.getInstance();
  @Cleanup Realm realm=Realm.getDefaultInstance();
switch (mType) {
case DBE_DOWNLOAD_REQUEST:
    if ("Successful".equals(result)) {
      if (mDbAdapter.populateDBeImport(realm)) {
        Helpers.msgShort(mAppContext,mAppContext.getString(R.string.opencellid_data_successfully_received));
      }
      realm.executeTransaction(mDbAdapter.checkDBe());
      tinydb.putBoolean("ocid_downloaded",true);
    }
 else     if ("Timeout".equals(result)) {
      Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_timed_out));
    }
 else {
      Helpers.msgLong(mAppContext,mAppContext.getString(R.string.error_retrieving_opencellid_data));
    }
  break;
case DBE_DOWNLOAD_REQUEST_FROM_MAP:
if ("Successful".equals(result)) {
  if (mDbAdapter.populateDBeImport(realm)) {
    Intent intent=new Intent(MapFragment.updateOpenCellIDMarkers);
    LocalBroadcastManager.getInstance(mAppContext).sendBroadcast(intent);
    Helpers.msgShort(mAppContext,mAppContext.getString(R.string.opencellid_data_successfully_received_markers_updated));
    realm.executeTransaction(mDbAdapter.checkDBe());
    tinydb.putBoolean("ocid_downloaded",true);
  }
}
 else if ("Timeout".equals(result)) {
  Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_timed_out));
}
 else {
  Helpers.msgLong(mAppContext,mAppContext.getString(R.string.error_retrieving_opencellid_data));
}
showHideMapProgressBar(false);
TinyDB.getInstance().putBoolean(TinyDbKeys.FINISHED_LOAD_IN_MAP,true);
break;
case DBE_UPLOAD_REQUEST:
if ("Successful".equals(result)) {
Helpers.msgShort(mAppContext,mAppContext.getString(R.string.uploaded_bts_data_successfully));
}
 else {
Helpers.msgLong(mAppContext,mAppContext.getString(R.string.error_uploading_bts_data));
}
break;
}
if (mListener != null) {
if ("Successful".equals(result)) {
mListener.onAsyncTaskSucceeded();
}
 else {
mListener.onAsyncTaskFailed(result);
}
}
}
