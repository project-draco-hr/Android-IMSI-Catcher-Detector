{
  String desourcedPath=path.toString().replace("src/","");
  File[] files=path.listFiles();
  for (  File file : files) {
    if (file.isDirectory()) {
      if (-1 == file.getAbsolutePath().indexOf(AVOIDDIRPATH)) {
        lookup(file,fileList);
      }
    }
 else {
      if (file.getName().endsWith(".java")) {
        if (hasClassAnnotation(file)) {
          final String fileNamePrefix=file.getName().replace(".java","");
          final File compiledPath=new File(getBuiltPath().toString() + File.separator + desourcedPath);
          File[] classAndInnerClassFiles=compiledPath.listFiles(new FilenameFilter(){
            @Override public boolean accept(            File dir,            String filename){
              return filename.startsWith(fileNamePrefix);
            }
          }
);
          for (          final File matchingFile : classAndInnerClassFiles) {
            fileList.add(new File(desourcedPath + File.separator + matchingFile.getName()));
          }
        }
      }
    }
  }
}
