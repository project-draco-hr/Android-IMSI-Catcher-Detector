{
  super.onViewCreated(view,savedInstanceState);
  DbViewerSpinnerAdapter mSpinnerAdapter=new DbViewerSpinnerAdapter(getActivity(),R.layout.item_spinner_db_viewer);
  tblSpinner.setAdapter(mSpinnerAdapter);
  tblSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parentView,    View selectedItemView,    final int position,    long id){
      Object selectedItem=tblSpinner.getSelectedItem();
      if (!(selectedItem instanceof StatesDbViewer)) {
        return;
      }
      mTableSelected=(StatesDbViewer)selectedItem;
      new AsyncTask<Void,Void,BaseInflaterAdapter>(){
        @Override protected BaseInflaterAdapter doInBackground(        Void... params){
          Cursor result;
switch (position) {
case 0:
            result=mDb.returnDBiBts();
          break;
case 1:
        result=mDb.returnDBiMeasure();
      break;
case 2:
    result=mDb.returnDBeImport();
  break;
case 3:
result=mDb.returnDefaultLocation();
break;
case 4:
result=mDb.returnSmsData();
break;
case 5:
result=mDb.returnDBiMeasure();
break;
case 6:
result=mDb.returnEventLogData();
break;
case 7:
result=mDb.returnDetectionStrings();
break;
default :
throw new IllegalArgumentException("Unknown type of table");
}
BaseInflaterAdapter adapter=null;
if (result != null) {
adapter=BuildTable(result);
result.close();
}
return adapter;
}
@Override protected void onPostExecute(BaseInflaterAdapter adapter){
if (getActivity() == null) {
return;
}
lv.setEmptyView(emptyView);
if (adapter != null) {
lv.setAdapter(adapter);
lv.setVisibility(View.VISIBLE);
}
 else {
lv.setVisibility(View.GONE);
emptyView.setVisibility(View.VISIBLE);
}
getActivity().setProgressBarIndeterminateVisibility(false);
}
}
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}
@Override public void onNothingSelected(AdapterView<?> parentView){
}
}
);
}
