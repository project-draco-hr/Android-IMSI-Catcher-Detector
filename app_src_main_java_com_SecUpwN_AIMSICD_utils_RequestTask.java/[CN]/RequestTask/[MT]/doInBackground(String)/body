{
switch (mType) {
case DBE_UPLOAD_REQUEST:
    try {
      boolean prepared=mDbAdapter.prepareOpenCellUploadData();
      Log.i(TAG,mTAG + ": OCID upload data prepared - " + String.valueOf(prepared));
      if (prepared) {
        File file=new File((mAppContext.getExternalFilesDir(null) + File.separator) + "OpenCellID/aimsicd-ocid-data.csv");
        publishProgress(25,100);
        MultipartEntity mpEntity=new MultipartEntity();
        FileInputStream fin=new FileInputStream(file);
        String csv=Helpers.convertStreamToString(fin);
        mpEntity.addPart("key",new StringBody(CellTracker.OCID_API_KEY));
        mpEntity.addPart("datafile",new InputStreamBody(new ByteArrayInputStream(csv.getBytes()),"text/csv","aimsicd-ocid-data.csv"));
        ByteArrayOutputStream bAOS=new ByteArrayOutputStream();
        publishProgress(50,100);
        mpEntity.writeTo(bAOS);
        bAOS.flush();
        ByteArrayEntity bArrEntity=new ByteArrayEntity(bAOS.toByteArray());
        bAOS.close();
        bArrEntity.setChunked(false);
        bArrEntity.setContentEncoding(mpEntity.getContentEncoding());
        bArrEntity.setContentType(mpEntity.getContentType());
        HttpClient httpclient;
        HttpPost httppost;
        HttpResponse response;
        httpclient=new DefaultHttpClient();
        httppost=new HttpPost("http://www.opencellid.org/measure/uploadCsv");
        publishProgress(60,100);
        httppost.setEntity(bArrEntity);
        response=httpclient.execute(httppost);
        publishProgress(80,100);
        if (response != null) {
          Log.i(TAG,mTAG + ": OCID Upload Response: " + response.getStatusLine().getStatusCode()+ " - "+ response.getStatusLine());
          if (response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_OK) {
            mDbAdapter.ocidProcessed();
          }
          publishProgress(95,100);
        }
        return "Successful";
      }
 else {
        Helpers.msgLong(mAppContext,mAppContext.getString(R.string.no_data_for_publishing));
        return null;
      }
    }
 catch (    Exception e) {
      Log.e(TAG,mTAG + ": Upload OpenCellID data Exception - " + e.getMessage());
      e.printStackTrace();
    }
case DBE_DOWNLOAD_REQUEST:
  mTimeOut=REQUEST_TIMEOUT_MENU;
case DBE_DOWNLOAD_REQUEST_FROM_MAP:
int count;
try {
int total;
int progress=0;
String dirName=getOCDBDownloadDirectoryPath(mAppContext);
File dir=new File(dirName);
if (!dir.exists()) {
  dir.mkdirs();
}
File file=new File(dir,OCDB_File_Name);
Log.i(TAG,mTAG + ": DBE_DOWNLOAD_REQUEST write to: " + dirName+ OCDB_File_Name);
URL url=new URL(commandString[0]);
HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
urlConnection.setRequestMethod("GET");
urlConnection.setConnectTimeout(mTimeOut);
urlConnection.setReadTimeout(mTimeOut);
urlConnection.setDoInput(true);
urlConnection.connect();
if (urlConnection.getResponseCode() != 200) {
  try {
    String error=Helpers.convertStreamToString(urlConnection.getErrorStream());
    Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_error) + " " + error);
    Log.e(TAG,mTAG + ": Download OCID data error: " + error);
  }
 catch (  Exception e) {
    Helpers.msgLong(mAppContext,mAppContext.getString(R.string.download_error) + " " + e.getClass().getName()+ " - "+ e.getMessage());
    Log.e(TAG,mTAG + ": Download OCID exception: " + e);
    e.printStackTrace();
  }
  return "Error";
}
 else {
  total=urlConnection.getContentLength();
  if (total == -1) {
    Log.d(TAG,mTAG + ":doInBackground DBE_DOWNLOAD_REQUEST total not returned!");
    total=1024;
  }
 else {
    Log.d(TAG,mTAG + ":doInBackground DBE_DOWNLOAD_REQUEST total: " + total);
    publishProgress((int)(0.25 * total),total);
  }
  FileOutputStream output=new FileOutputStream(file,false);
  InputStream input=new BufferedInputStream(urlConnection.getInputStream());
  byte[] data=new byte[1024];
  while ((count=input.read(data)) > 0) {
    output.write(data,0,count);
    progress+=count;
    publishProgress(progress,total);
  }
  output.flush();
  output.close();
}
urlConnection.disconnect();
return "Successful";
}
 catch (MalformedURLException e) {
e.printStackTrace();
return null;
}
catch (IOException e) {
e.printStackTrace();
return null;
}
case BACKUP_DATABASE:
if (mDbAdapter.backupDB()) {
return "Successful";
}
return null;
case RESTORE_DATABASE:
if (mDbAdapter.restoreDB()) {
return "Successful";
}
return null;
}
return null;
}
