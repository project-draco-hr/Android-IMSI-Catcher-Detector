{
switch (mType) {
case OPEN_CELL_ID_REQUEST:
case OPEN_CELL_ID_REQUEST_FROM_MAP:
    int count;
  try {
    if (AimsicdService.OCID_UPLOAD_PREF) {
      boolean prepared=mDbAdapter.prepareOpenCellUploadData();
      Log.i("AIMSICD","OCID prepared - " + String.valueOf(prepared));
      if (prepared) {
        File file=new File(Environment.getExternalStorageDirectory() + "/AIMSICD/OpenCellID/aimsicd-ocid-data.csv");
        publishProgress(25,100);
        MultipartEntity mpEntity=new MultipartEntity();
        FileInputStream fin=new FileInputStream(file);
        String csv=Helpers.convertStreamToString(fin);
        mpEntity.addPart("key",new StringBody(AimsicdService.OCID_API_KEY));
        mpEntity.addPart("datafile",new InputStreamBody(new ByteArrayInputStream(csv.getBytes()),"text/csv","aimsicd-ocid-data.csv"));
        ByteArrayOutputStream bAOS=new ByteArrayOutputStream();
        publishProgress(50,100);
        mpEntity.writeTo(bAOS);
        bAOS.flush();
        ByteArrayEntity bArrEntity=new ByteArrayEntity(bAOS.toByteArray());
        bAOS.close();
        bArrEntity.setChunked(false);
        bArrEntity.setContentEncoding(mpEntity.getContentEncoding());
        bArrEntity.setContentType(mpEntity.getContentType());
        HttpClient httpclient;
        HttpPost httppost;
        HttpResponse response;
        httpclient=new DefaultHttpClient();
        httppost=new HttpPost("http://www.opencellid.org/measure/uploadCsv");
        publishProgress(60,100);
        httppost.setEntity(bArrEntity);
        response=httpclient.execute(httppost);
        publishProgress(80,100);
        if (response != null) {
          Log.i("AIMSICD","OCID Upload Response: " + response.getStatusLine().getStatusCode() + " - "+ response.getStatusLine());
          mDbAdapter.ocidProcessed();
          publishProgress(95,100);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.i("AIMSICD","Upload OpenCellID data - " + e.getMessage());
  }
try {
  int total;
  int progress=0;
  File dir=new File(Environment.getExternalStorageDirectory() + "/AIMSICD/OpenCellID/");
  if (!dir.exists()) {
    dir.mkdirs();
  }
  File file=new File(dir,"opencellid.csv");
  URL url=new URL(commandString[0]);
  HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
  urlConnection.setRequestMethod("GET");
  urlConnection.setConnectTimeout(20000);
  urlConnection.setReadTimeout(20000);
  urlConnection.setDoInput(true);
  urlConnection.connect();
  if (urlConnection.getResponseCode() != 200) {
    try {
      String error=Helpers.convertStreamToString(urlConnection.getErrorStream());
      Log.e("AIMSICD","Download ocid data error: " + error);
    }
 catch (    Exception e) {
      Log.e("AIMSICD","Download ocid - " + e);
    }
  }
 else {
    total=urlConnection.getContentLength();
    publishProgress(progress,total);
    FileOutputStream output=new FileOutputStream(file,false);
    InputStream input=new BufferedInputStream(urlConnection.getInputStream());
    byte[] data=new byte[1024];
    while ((count=input.read(data)) > 0) {
      output.write(data,0,count);
      progress+=count;
      publishProgress(progress,total);
    }
    output.flush();
    output.close();
  }
  urlConnection.disconnect();
  return "Successful";
}
 catch (MalformedURLException e) {
  return null;
}
catch (IOException e) {
  return null;
}
case BACKUP_DATABASE:
mDbAdapter.open();
if (mDbAdapter.backupDB()) {
mDbAdapter.close();
return "Successful";
}
mDbAdapter.close();
return null;
case RESTORE_DATABASE:
mDbAdapter.open();
if (mDbAdapter.restoreDB()) {
mDbAdapter.close();
return "Successful";
}
mDbAdapter.close();
return null;
}
return null;
}
