{
  visualUpdate(TestHandler.ACTION_SHOW,null);
  boolean result;
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing getPath");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ getPath ]\n");
  try {
    List<String> paths=RootShell.getPath();
    for (    String path : paths) {
      visualUpdate(TestHandler.ACTION_DISPLAY,path + " k\n\n");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing A ton of commands");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Ton of Commands ]\n");
  for (int i=0; i < 100; i++) {
    RootShell.exists("/system/xbin/busybox");
  }
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing Find Binary");
  result=RootShell.isRootAvailable();
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Checking Root ]\n");
  visualUpdate(TestHandler.ACTION_DISPLAY,result + " k\n\n");
  result=RootShell.isBusyboxAvailable();
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Checking Busybox ]\n");
  visualUpdate(TestHandler.ACTION_DISPLAY,result + " k\n\n");
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing file exists");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Checking Exists() ]\n");
  visualUpdate(TestHandler.ACTION_DISPLAY,RootShell.exists("/system/sbin/[") + " k\n\n");
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing Is Access Given");
  result=RootShell.isAccessGiven();
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Checking for Access to Root ]\n");
  visualUpdate(TestHandler.ACTION_DISPLAY,result + " k\n\n");
  Shell shell;
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Testing output capture");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ busybox ash --help ]\n");
  try {
    shell=RootShell.getShell(true);
    Command cmd=new Command(0,"busybox ash --help"){
      @Override public void commandOutput(      int id,      String line){
        visualUpdate(TestHandler.ACTION_DISPLAY,line + "\n");
      }
    }
;
    shell.add(cmd);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Switching RootContext - SYSTEM_APP");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Switching Root Context - SYSTEM_APP ]\n");
  try {
    shell=RootShell.getShell(true,Shell.ShellContext.SYSTEM_APP);
    Command cmd=new Command(0,"id"){
      @Override public void commandOutput(      int id,      String line){
        visualUpdate(TestHandler.ACTION_DISPLAY,line + "\n");
        super.commandOutput(id,line);
      }
    }
;
    shell.add(cmd);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  visualUpdate(TestHandler.ACTION_PDISPLAY,"Switching RootContext - UNTRUSTED");
  visualUpdate(TestHandler.ACTION_DISPLAY,"[ Switching Root Context - UNTRUSTED ]\n");
  try {
    shell=RootShell.getShell(true,Shell.ShellContext.UNTRUSTED_APP);
    Command cmd=new Command(0,"id"){
      @Override public void commandOutput(      int id,      String line){
        visualUpdate(TestHandler.ACTION_DISPLAY,line + "\n");
        super.commandOutput(id,line);
      }
    }
;
    shell.add(cmd);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    shell=RootShell.getShell(true);
    Command cmd=new Command(42,false,"echo done"){
      boolean _catch=false;
      @Override public void commandOutput(      int id,      String line){
        if (_catch) {
          RootShell.log("CAUGHT!!!");
        }
        super.commandOutput(id,line);
      }
      @Override public void commandTerminated(      int id,      String reason){
synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) {
          _catch=true;
          visualUpdate(TestHandler.ACTION_PDISPLAY,"All tests complete.");
          visualUpdate(TestHandler.ACTION_HIDE,null);
          try {
            RootShell.closeAllShells();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
      @Override public void commandCompleted(      int id,      int exitCode){
synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) {
          _catch=true;
          visualUpdate(TestHandler.ACTION_PDISPLAY,"All tests complete.");
          visualUpdate(TestHandler.ACTION_HIDE,null);
          try {
            RootShell.closeAllShells();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    shell.add(cmd);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
