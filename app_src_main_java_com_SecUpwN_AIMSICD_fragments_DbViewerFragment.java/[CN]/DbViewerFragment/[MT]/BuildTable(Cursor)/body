{
  if (tableData != null && tableData.getCount() > 0) {
    if (getString(R.string.imported_ocid_data).equalsIgnoreCase(mTableSelected)) {
      BaseInflaterAdapter<CardItemData> adapter=new BaseInflaterAdapter<>(new OpenCellIdCardInflater());
      int count=tableData.getCount();
      while (tableData.moveToNext()) {
        CardItemData data=new CardItemData("CID: " + tableData.getString(0),"LAC: " + tableData.getString(1),"MCC: " + tableData.getString(2),"MNC: " + tableData.getString(3),"Lat: " + tableData.getString(4),"Lon: " + tableData.getString(5),"AvgSignal: " + tableData.getString(6),"Samples: " + tableData.getString(7),"" + (tableData.getPosition() + 1) + " / "+ count);
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
 else     if (getString(R.string.default_mmc_locations).equalsIgnoreCase(mTableSelected)) {
      BaseInflaterAdapter<CardItemData> adapter=new BaseInflaterAdapter<>(new DefaultLocationCardInflater());
      int count=tableData.getCount();
      while (tableData.moveToNext()) {
        CardItemData data=new CardItemData("Country: " + tableData.getString(0),"MCC: " + tableData.getString(1),"Lat: " + tableData.getString(2),"Lon: " + tableData.getString(3),"" + (tableData.getPosition() + 1) + " / "+ count);
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
 else     if (getString(R.string.silent_sms).equalsIgnoreCase(mTableSelected)) {
      BaseInflaterAdapter<SilentSmsCardData> adapter=new BaseInflaterAdapter<>(new SilentSmsCardInflater());
      while (tableData.moveToNext()) {
        SilentSmsCardData data=new SilentSmsCardData(tableData.getString(0),tableData.getString(1),tableData.getString(2),tableData.getString(3),tableData.getString(4),tableData.getLong(5));
        data.setIsFakeData(isExample(data));
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
 else     if (getString(R.string.measured_signal_strengths).equalsIgnoreCase(mTableSelected)) {
      BaseInflaterAdapter<MeasuredCellStrengthCardData> adapter=new BaseInflaterAdapter<>(new MeasuredCellStrengthCardInflater());
      while (tableData.moveToNext()) {
        MeasuredCellStrengthCardData data=new MeasuredCellStrengthCardData(tableData.getInt(0),tableData.getInt(1),tableData.getLong(2));
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
 else     if (getString(R.string.eventlog).equalsIgnoreCase(mTableSelected)) {
      BaseInflaterAdapter<EventLogItemData> adapter=new BaseInflaterAdapter<>(new EventLogCardInflater());
      int count=tableData.getCount();
      while (tableData.moveToNext()) {
        EventLogItemData data=new EventLogItemData("Time: " + tableData.getString(0),"LAC: " + tableData.getInt(1),"CID: " + tableData.getInt(2),"PSC: " + tableData.getInt(3),"Lat: " + tableData.getDouble(4),"Lon: " + tableData.getDouble(5),"Accuracy: " + tableData.getInt(6),"DetID: " + tableData.getInt(7),"Event: " + tableData.getString(8),"" + (tableData.getPosition() + 1) + " / "+ count);
        data.setIsFakeData(isExample(data));
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
 else {
      BaseInflaterAdapter<CardItemData> adapter=new BaseInflaterAdapter<>(new CellCardInflater());
      int count=tableData.getCount();
      while (tableData.moveToNext()) {
        CardItemData data=new CardItemData("CID: " + tableData.getString(0),"LAC: " + tableData.getString(1),"RAT: " + tableData.getString(2),"Lat: " + tableData.getString(3),"Lon: " + tableData.getString(4),"RSS: " + tableData.getString(5),"" + (tableData.getPosition() + 1) + " / "+ count);
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
  }
 else {
    return null;
  }
}
