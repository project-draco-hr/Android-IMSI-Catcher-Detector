{
  if (tableData != null && tableData.getCount() > 0) {
switch (mTableSelected) {
case UNIQUE_BTS_DATA:
{
        BaseInflaterAdapter<UniqueBtsItemData> adapter=new BaseInflaterAdapter<>(new UniqueBtsCardInflater());
        int count=tableData.getCount();
        while (tableData.moveToNext()) {
          UniqueBtsItemData data=new UniqueBtsItemData(String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_MCC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_MNC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LAC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_CID))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_PSC))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_TIME_FIRST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_TIME_LAST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LON)));
          adapter.addItem(data,false);
        }
        if (!tableData.isClosed()) {
          tableData.close();
        }
        return adapter;
      }
case BTS_MEASUREMENTS:
{
      BaseInflaterAdapter<BtsMeasureItemData> adapter=new BaseInflaterAdapter<>(new BtsMeasureCardInflater());
      while (tableData.moveToNext()) {
        BtsMeasureItemData data=new BtsMeasureItemData("bts_id: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_BTS_ID))),"nc_list: ","time: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_TIME)),"gpsd_lat: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_LAT)),"gpsd_lon: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_LON)),"gpsd_accu: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_ACCURACY))),"bb_power: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_BB_POWER)),"rx_signal: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_RX_SIGNAL)),"RAT: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_RAT)),"isSubmitted: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_IS_SUBMITTED))),"isNeighbour: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_IS_NEIGHBOUR))));
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
case IMPORTED_OCID_DATA:
{
    BaseInflaterAdapter<DbeImportItemData> adapter=new BaseInflaterAdapter<>(new DbeImportCardInflater());
    int count=tableData.getCount();
    while (tableData.moveToNext()) {
      DbeImportItemData data=new DbeImportItemData(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_DBSOURCE)) + "\t\t" + (tableData.getPosition() + 1)+ " / "+ count,tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_RAT)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_MCC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_MNC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_LAC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_CID))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_PSC))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_GPS_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_GPS_LON)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_IS_GPS_EXACT))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_AVG_RANGE))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_AVG_SIGNAL))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_SAMPLES))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_TIME_FIRST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_TIME_LAST)));
      adapter.addItem(data,false);
    }
    if (!tableData.isClosed()) {
      tableData.close();
    }
    return adapter;
  }
case DEFAULT_MCC_LOCATIONS:
{
  BaseInflaterAdapter<CardItemData> adapter=new BaseInflaterAdapter<>(new DefaultLocationCardInflater());
  int count=tableData.getCount();
  while (tableData.moveToNext()) {
    CardItemData data=new CardItemData("Country: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_COUNTRY)),"MCC: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_MCC))),"Lat: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_LAT)),"Lon: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_LON)),"" + (tableData.getPosition() + 1) + " / "+ count);
    adapter.addItem(data,false);
  }
  if (!tableData.isClosed()) {
    tableData.close();
  }
  return adapter;
}
case SILENT_SMS:
{
BaseInflaterAdapter<CapturedSmsData> adapter=new BaseInflaterAdapter<>(new CapturedSmsCardInflater());
if (tableData.getCount() > 0) {
  while (tableData.moveToNext()) {
    CapturedSmsData getdata=new CapturedSmsData();
    getdata.setSmsTimestamp(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_TIMESTAMP)));
    getdata.setSmsType(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_SMS_TYPE)));
    getdata.setSenderNumber(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_SENDER_NUMBER)));
    getdata.setSenderMsg(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_SENDER_MSG)));
    getdata.setCurrent_lac(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_LAC)));
    getdata.setCurrent_cid(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_CID)));
    getdata.setCurrent_nettype(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_RAT)));
    getdata.setCurrent_roam_status(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_ROAM_STATE)));
    getdata.setCurrent_gps_lat(tableData.getDouble(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_GPS_LAT)));
    getdata.setCurrent_gps_lon(tableData.getDouble(tableData.getColumnIndex(DBTableColumnIds.SMS_DATA_GPS_LON)));
    adapter.addItem(getdata,false);
  }
}
if (!tableData.isClosed()) {
  tableData.close();
}
return adapter;
}
case MEASURED_SIGNAL_STRENGTHS:
{
BaseInflaterAdapter<MeasuredCellStrengthCardData> adapter=new BaseInflaterAdapter<>(new MeasuredCellStrengthCardInflater());
while (tableData.moveToNext()) {
MeasuredCellStrengthCardData data=new MeasuredCellStrengthCardData(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_BTS_ID)),Integer.parseInt(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_BB_POWER))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_TIME)));
adapter.addItem(data,false);
}
if (!tableData.isClosed()) {
tableData.close();
}
return adapter;
}
case EVENT_LOG:
{
BaseInflaterAdapter<EventLogItemData> adapter=new BaseInflaterAdapter<>(new EventLogCardInflater());
int count=tableData.getCount();
while (tableData.moveToNext()) {
EventLogItemData data=new EventLogItemData("Time: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_TIME)),"LAC: " + tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_LAC)),"CID: " + tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_CID)),"PSC: " + tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_PSC)),"Lat: " + tableData.getDouble(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_LAT)),"Lon: " + tableData.getDouble(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_LON)),"Accu: " + tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_ACCU)),"DF_id: " + tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_DF_ID)),"Event: " + tableData.getString(tableData.getColumnIndex(DBTableColumnIds.EVENTLOG_DF_DESC)),"" + (tableData.getPosition() + 1) + " / "+ count);
data.setIsFakeData(isExample(data));
adapter.addItem(data,false);
}
if (!tableData.isClosed()) {
tableData.close();
}
return adapter;
}
case DETECTION_STRINGS:
{
BaseInflaterAdapter<DetectionStringsData> adapter=new BaseInflaterAdapter<>(new DetectionStringsCardInflater());
int count=tableData.getCount();
while (tableData.moveToNext()) {
DetectionStringsData data=new DetectionStringsData(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DETECTION_STRINGS_LOGCAT_STRING)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DETECTION_STRINGS_SMS_TYPE)));
adapter.addItem(data,false);
}
if (!tableData.isClosed()) {
tableData.close();
}
return adapter;
}
}
}
 else {
return null;
}
return null;
}
