{
  Log.i(TAG,"Open root shell, reopen = " + reOpen);
  if (mShellOpened && !reOpen) {
    Log.i(TAG,"Shell already opened");
    return true;
  }
 else   if (mShellOpened) {
    Log.i(TAG,"Close current shell");
    closeShell();
  }
  try {
    Log.i(TAG,"Starting rootshell");
    mShellProcess=Runtime.getRuntime().exec("su");
  }
 catch (  IOException ioe) {
    Log.i(TAG,"Error starting shell - " + ioe.getMessage());
    mShellProcess=null;
    mShellStdIn=null;
    mShellStdOut=null;
    mShellStdErr=null;
    mShellOpened=false;
    return false;
  }
  Log.i(TAG,"Fetching shell stdin, stdout and stderr");
  mShellStdIn=new DataOutputStream(mShellProcess.getOutputStream());
  mShellStdOut=new DataInputStream(mShellProcess.getInputStream());
  mShellStdErr=new DataInputStream(mShellProcess.getErrorStream());
  try {
    Log.i(TAG,"Performing shell banner and query id, timeout = 20 secs");
    mShellStdIn.writeBytes("echo \"Welcome to AIMSICD's root Shell\"\n");
    mShellStdIn.writeBytes("id\n");
    mShellStdIn.flush();
    boolean result=false;
    for (int waitCount=0; waitCount < 200; waitCount++) {
      List<String> stdOut=GetStdOut();
      if (stdOut != null) {
        result=true;
      }
      List<String> stdErr=GetStdErr();
      if (stdErr != null) {
        result=true;
      }
      if (result) {
        if (stdOut != null) {
          for (          String line : stdOut) {
            Log.i(TAG,"stdout: " + line);
          }
        }
        if (stdErr != null) {
          for (          String line : stdErr) {
            Log.i(TAG,"stderr: " + line);
          }
        }
        break;
      }
      SystemClock.sleep(100);
      Log.i(TAG,((waitCount + 1) * 100) + " ms waited, still no result");
    }
    if (!result) {
      Log.i(TAG,"Root shell timeout");
      closeShell();
      return false;
    }
  }
 catch (  IOException ioe) {
    Log.i(TAG,"OpenRootShell - " + ioe.getMessage());
    closeShell();
    return false;
  }
  clearStdOutAndErr();
  mShellOpened=true;
  return true;
}
