{
  if (tableData != null && tableData.getCount() > 0) {
switch (mTableSelected) {
case UNIQUE_BTS_DATA:
{
        BaseInflaterAdapter<UniqueBtsItemData> adapter=new BaseInflaterAdapter<>(new UniqueBtsCardInflater());
        int count=tableData.getCount();
        while (tableData.moveToNext()) {
          UniqueBtsItemData data=new UniqueBtsItemData(String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_MCC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_MNC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LAC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_CID))),Cell.validatePscValue(this.getContext(),tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_PSC))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_TIME_FIRST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_TIME_LAST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_BTS_LON)),(tableData.getPosition() + 1) + " / " + count);
          adapter.addItem(data,false);
        }
        if (!tableData.isClosed()) {
          tableData.close();
        }
        return adapter;
      }
case BTS_MEASUREMENTS:
{
      BaseInflaterAdapter<BtsMeasureItemData> adapter=new BaseInflaterAdapter<>(new BtsMeasureCardInflater());
      int count=tableData.getCount();
      while (tableData.moveToNext()) {
        BtsMeasureItemData data=new BtsMeasureItemData("bts_id: " + String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_BTS_ID))),"n/a",tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_TIME)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_LON)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_GPSD_ACCURACY))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_RX_SIGNAL)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_RAT)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_IS_SUBMITTED))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBI_MEASURE_IS_NEIGHBOUR))),(tableData.getPosition() + 1) + " / " + count);
        adapter.addItem(data,false);
      }
      if (!tableData.isClosed()) {
        tableData.close();
      }
      return adapter;
    }
case IMPORTED_OCID_DATA:
{
    BaseInflaterAdapter<DbeImportItemData> adapter=new BaseInflaterAdapter<>(new DbeImportCardInflater());
    int count=tableData.getCount();
    while (tableData.moveToNext()) {
      DbeImportItemData data=new DbeImportItemData(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_DBSOURCE)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_RAT)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_MCC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_MNC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_LAC))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_CID))),Cell.validatePscValue(this.getContext(),tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_PSC))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_GPS_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_GPS_LON)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_IS_GPS_EXACT))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_AVG_RANGE))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_AVG_SIGNAL))),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_SAMPLES))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_TIME_FIRST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_TIME_LAST)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DBE_IMPORT_REJ_CAUSE)),(tableData.getPosition() + 1) + " / " + count);
      adapter.addItem(data,false);
    }
    if (!tableData.isClosed()) {
      tableData.close();
    }
    return adapter;
  }
case DEFAULT_MCC_LOCATIONS:
{
  BaseInflaterAdapter<CardItemData> adapter=new BaseInflaterAdapter<>(new DefaultLocationCardInflater());
  int count=tableData.getCount();
  while (tableData.moveToNext()) {
    CardItemData data=new CardItemData(tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_COUNTRY)),String.valueOf(tableData.getInt(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_MCC))),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_LAT)),tableData.getString(tableData.getColumnIndex(DBTableColumnIds.DEFAULT_LOCATION_LON)),(tableData.getPosition() + 1) + " / " + count);
    adapter.addItem(data,false);
  }
  if (!tableData.isClosed()) {
    tableData.close();
  }
  return adapter;
}
case MEASURED_SIGNAL_STRENGTHS:
{
BaseInflaterAdapter<MeasuredCellStrengthCardData> adapter=new BaseInflaterAdapter<>(new MeasuredCellStrengthCardInflater());
while (tableData.moveToNext()) {
  MeasuredCellStrengthCardData data=new MeasuredCellStrengthCardData(tableData.getInt(tableData.getColumnIndex("bts_id")),Integer.parseInt(tableData.getString(tableData.getColumnIndex("rx_signal"))),tableData.getString(tableData.getColumnIndex("time")));
  adapter.addItem(data,false);
}
if (!tableData.isClosed()) {
  tableData.close();
}
return adapter;
}
}
}
 else {
return null;
}
return null;
}
