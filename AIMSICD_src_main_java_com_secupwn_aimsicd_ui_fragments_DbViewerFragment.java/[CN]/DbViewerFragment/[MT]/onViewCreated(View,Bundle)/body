{
  super.onViewCreated(view,savedInstanceState);
  DbViewerSpinnerAdapter mSpinnerAdapter=new DbViewerSpinnerAdapter(getActivity(),R.layout.item_spinner_db_viewer);
  tblSpinner.setAdapter(mSpinnerAdapter);
  tblSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parentView,    View selectedItemView,    final int position,    long id){
      Object selectedItem=tblSpinner.getSelectedItem();
      if (!(selectedItem instanceof StatesDbViewer)) {
        return;
      }
      mTableSelected=(StatesDbViewer)selectedItem;
      if (position == 4) {
        setListAdapter(new SmsDataAdapter(getActivity(),realm.allObjects(SmsData.class),true));
      }
 else       if (position == 7) {
        setListAdapter(new DetectionStringAdapter(getActivity(),realm.allObjects(SmsDetectionString.class),true));
      }
 else {
        new AsyncTask<Void,Void,ListAdapter>(){
          @Override protected ListAdapter doInBackground(          Void... params){
            Cursor result;
switch (position) {
case 0:
              result=mDb.returnDBiBts();
            break;
case 1:
          result=mDb.returnDBiMeasure();
        break;
case 2:
      result=mDb.returnDBeImport();
    break;
case 3:
  result=mDb.returnDefaultLocation();
break;
case 5:
result=mDb.returnDBiMeasure();
break;
case 6:
result=mDb.returnEventLogData();
break;
default :
throw new IllegalArgumentException("Unknown type of table");
}
BaseInflaterAdapter adapter=null;
if (result != null) {
adapter=BuildTable(result);
result.close();
}
return adapter;
}
@Override protected void onPostExecute(ListAdapter adapter){
setListAdapter(adapter);
}
}
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}
}
@Override public void onNothingSelected(AdapterView<?> parentView){
}
}
);
}
