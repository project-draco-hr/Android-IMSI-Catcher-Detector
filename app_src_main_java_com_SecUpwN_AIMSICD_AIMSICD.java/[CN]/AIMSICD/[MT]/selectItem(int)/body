{
  NavDrawerItem selectedItem=mNavConf.getNavItems().get(position);
switch (selectedItem.getId()) {
case 101:
    getFragmentManager().beginTransaction().replace(R.id.content_frame,new DeviceFragment()).commit();
  break;
case 102:
getFragmentManager().beginTransaction().replace(R.id.content_frame,new CellInfoFragment()).commit();
break;
case 103:
getFragmentManager().beginTransaction().replace(R.id.content_frame,new AtCommandFragment()).commit();
break;
case 104:
getFragmentManager().beginTransaction().replace(R.id.content_frame,new DbViewerFragment()).commit();
break;
case 303:
getFragmentManager().beginTransaction().replace(R.id.content_frame,new AboutFragment()).commit();
break;
}
if (selectedItem.getId() == 901) {
monitercell();
}
 else if (selectedItem.getId() == 902) {
trackcell();
}
 else if (selectedItem.getId() == 903) {
trackFemtocell();
}
 else if (selectedItem.getId() == 105) {
showmap();
}
 else if (selectedItem.getId() == 202) {
Intent intent=new Intent(this,PrefActivity.class);
startActivity(intent);
}
 else if (selectedItem.getId() == 203) {
new RequestTask(mContext,RequestTask.BACKUP_DATABASE).execute();
}
 else if (selectedItem.getId() == 204) {
if (CellTracker.LAST_DB_BACKUP_VERSION < AIMSICDDbAdapter.DATABASE_VERSION) {
Helpers.msgShort(mContext,"Unable to restore backup from previous database version" + " due to structural changes!");
}
 else {
new RequestTask(mContext,RequestTask.RESTORE_DATABASE).execute();
}
}
 else if (selectedItem.getId() == 301) {
if (!CellTracker.OCID_API_KEY.equals("NA")) {
GeoLocation loc=mAimsicdService.lastKnownLocation();
if (loc != null) {
Helpers.msgShort(mContext,"Contacting OpenCellID.org for data...");
Cell cell=new Cell();
cell.setLon(loc.getLongitudeInDegrees());
cell.setLat(loc.getLatitudeInDegrees());
Helpers.getOpenCellData(mContext,cell,RequestTask.OPEN_CELL_ID_REQUEST);
}
 else {
LocationServices.LocationAsync locationAsync=new LocationServices.LocationAsync();
locationAsync.delegate=this;
locationAsync.execute(mAimsicdService.getCell().getCID(),mAimsicdService.getCell().getLAC(),mAimsicdService.getCell().getMNC(),mAimsicdService.getCell().getMCC());
}
}
 else {
Helpers.sendMsg(mContext,"No OpenCellID API Key detected! \nPlease enter your key in settings first.");
}
}
 else if (selectedItem.getId() == 302) {
if (!CellTracker.OCID_API_KEY.equals("NA")) {
Cell.CellLookUpAsync cellLookUpAsync=new Cell.CellLookUpAsync();
cellLookUpAsync.delegate=this;
StringBuilder sb=new StringBuilder();
sb.append("http://www.opencellid.org/cell/get?key=").append(CellTracker.OCID_API_KEY);
if (mAimsicdService.getCell().getMCC() != Integer.MAX_VALUE) {
sb.append("&mcc=").append(mAimsicdService.getCell().getMCC());
}
if (mAimsicdService.getCell().getMNC() != Integer.MAX_VALUE) {
sb.append("&mnc=").append(mAimsicdService.getCell().getMNC());
}
if (mAimsicdService.getCell().getLAC() != Integer.MAX_VALUE) {
sb.append("&lac=").append(mAimsicdService.getCell().getLAC());
}
if (mAimsicdService.getCell().getCID() != Integer.MAX_VALUE) {
sb.append("&cellid=").append(mAimsicdService.getCell().getCID());
}
sb.append("&format=xml");
cellLookUpAsync.execute(sb.toString());
}
 else {
Helpers.sendMsg(mContext,"No OpenCellID API Key detected! \nPlease enter your key in settings first.");
}
}
 else if (selectedItem.getId() == 304) {
finish();
}
mDrawerList.setItemChecked(position,true);
if (selectedItem.updateActionBarTitle()) {
setTitle(selectedItem.getLabel());
}
if (this.mDrawerLayout.isDrawerOpen(this.mDrawerList)) {
mDrawerLayout.closeDrawer(mDrawerList);
}
}
