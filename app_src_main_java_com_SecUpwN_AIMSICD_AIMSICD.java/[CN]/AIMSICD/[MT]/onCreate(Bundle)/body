{
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  Intent intent=new Intent(this,AimsicdService.class);
  startService(intent);
  bindService(intent,mConnection,Context.BIND_AUTO_CREATE);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  mActionBar=getActionBar();
  mNavigationTitles=getResources().getStringArray(R.array.navigation_array);
  mTitle=mDrawerTitle=getTitle();
  int[] mIcons=new int[]{R.drawable.ic_action_phone,R.drawable.cell_tower,R.drawable.ic_action_computer,R.drawable.ic_action_storage,R.drawable.ic_action_map,R.drawable.ic_action_about};
  List<HashMap<String,String>> navigationItems=new ArrayList<>();
  for (int i=0; i < 6; i++) {
    HashMap<String,String> hm=new HashMap<>();
    hm.put("title",mNavigationTitles[i]);
    hm.put("icon",Integer.toString(mIcons[i]));
    navigationItems.add(hm);
  }
  String[] from={"title","icon"};
  int[] to={R.id.navigation_item,R.id.icon};
  mDrawerList.setAdapter(new SimpleAdapter(mContext,navigationItems,R.layout.drawer_layout,from,to));
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      mActionBar.setTitle(mTitle);
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      mActionBar.setTitle(mDrawerTitle);
    }
  }
;
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mActionBar.setDisplayHomeAsUpEnabled(true);
  mActionBar.setHomeButtonEnabled(true);
  FragmentManager fragmentManager=getFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.content_frame,new DeviceFragment()).commit();
  mProgressBar=(ProgressBar)findViewById(R.id.progressBar);
  prefs=mContext.getSharedPreferences(AimsicdService.SHARED_PREFERENCES_BASENAME,0);
  mDisclaimerAccepted=getResources().getString(R.string.disclaimer_accepted);
  if (!prefs.getBoolean(mDisclaimerAccepted,false)) {
    final AlertDialog.Builder disclaimer=new AlertDialog.Builder(this).setTitle(R.string.disclaimer_title).setMessage(R.string.disclaimer).setPositiveButton(R.string.text_ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        prefsEditor=prefs.edit();
        prefsEditor.putBoolean(mDisclaimerAccepted,true);
        prefsEditor.commit();
      }
    }
).setNegativeButton(R.string.text_cancel,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        prefsEditor=prefs.edit();
        prefsEditor.putBoolean(mDisclaimerAccepted,false);
        prefsEditor.commit();
        Uri packageUri=Uri.parse("package:com.SecUpwN.AIMSICD");
        Intent uninstallIntent=new Intent(Intent.ACTION_DELETE,packageUri);
        startActivity(uninstallIntent);
        finish();
        mAimsicdService.onDestroy();
      }
    }
);
    AlertDialog disclaimerAlert=disclaimer.create();
    disclaimerAlert.show();
  }
}
