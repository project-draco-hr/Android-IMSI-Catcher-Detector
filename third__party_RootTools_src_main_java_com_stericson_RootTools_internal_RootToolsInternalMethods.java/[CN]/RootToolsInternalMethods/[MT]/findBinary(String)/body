{
  boolean found=false;
  RootTools.lastFoundBinaryPaths.clear();
  final List<String> list=new ArrayList<String>();
  String[] places={"/sbin/","/system/bin/","/system/xbin/","/data/local/xbin/","/data/local/bin/","/system/sd/xbin/","/system/bin/failsafe/","/data/local/"};
  RootTools.log("Checking for " + binaryName);
  try {
    for (    final String path : places) {
      CommandCapture cc=new CommandCapture(0,false,"stat " + path + binaryName){
        @Override public void commandOutput(        int id,        String line){
          if (line.contains("File: ") && line.contains(binaryName)) {
            list.add(path);
            RootTools.log(binaryName + " was found here: " + path);
          }
          RootTools.log(line);
        }
      }
;
      RootTools.getShell(false).add(cc);
      commandWait(RootTools.getShell(false),cc);
    }
    found=!list.isEmpty();
  }
 catch (  Exception e) {
    RootTools.log(binaryName + " was not found, more information MAY be available with Debugging on.");
  }
  if (!found) {
    RootTools.log("Trying second method");
    for (    String where : places) {
      if (RootTools.exists(where + binaryName)) {
        RootTools.log(binaryName + " was found here: " + where);
        list.add(where);
        found=true;
      }
 else {
        RootTools.log(binaryName + " was NOT found here: " + where);
      }
    }
  }
  if (!found) {
    RootTools.log("Trying third method");
    try {
      List<String> paths=RootTools.getPath();
      if (paths != null) {
        for (        String path : paths) {
          if (RootTools.exists(path + "/" + binaryName)) {
            RootTools.log(binaryName + " was found here: " + path);
            list.add(path);
            found=true;
          }
 else {
            RootTools.log(binaryName + " was NOT found here: " + path);
          }
        }
      }
    }
 catch (    Exception e) {
      RootTools.log(binaryName + " was not found, more information MAY be available with Debugging on.");
    }
  }
  Collections.reverse(list);
  RootTools.lastFoundBinaryPaths.addAll(list);
  return found;
}
