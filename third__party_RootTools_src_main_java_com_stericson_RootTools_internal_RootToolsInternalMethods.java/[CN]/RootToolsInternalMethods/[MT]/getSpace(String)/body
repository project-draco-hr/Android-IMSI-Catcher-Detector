{
  InternalVariables.getSpaceFor=path;
  boolean found=false;
  RootTools.log("Looking for Space");
  try {
    final CommandCapture command=new CommandCapture(Constants.GS,false,"df " + path){
      @Override public void output(      int id,      String line){
        if (id == Constants.GS) {
          if (line.contains(InternalVariables.getSpaceFor.trim())) {
            InternalVariables.space=line.split(" ");
          }
        }
      }
    }
;
    Shell.startRootShell().add(command);
    commandWait(Shell.startRootShell(),command);
  }
 catch (  Exception e) {
  }
  if (InternalVariables.space != null) {
    RootTools.log("First Method");
    for (    String spaceSearch : InternalVariables.space) {
      RootTools.log(spaceSearch);
      if (found) {
        return getConvertedSpace(spaceSearch);
      }
 else       if (spaceSearch.equals("used,")) {
        found=true;
      }
    }
    int count=0, targetCount=3;
    RootTools.log("Second Method");
    if (InternalVariables.space[0].length() <= 5) {
      targetCount=2;
    }
    for (    String spaceSearch : InternalVariables.space) {
      RootTools.log(spaceSearch);
      if (spaceSearch.length() > 0) {
        RootTools.log(spaceSearch + ("Valid"));
        if (count == targetCount) {
          return getConvertedSpace(spaceSearch);
        }
        count++;
      }
    }
  }
  RootTools.log("Returning -1, space could not be determined.");
  return -1;
}
