{
  super.onCreate(savedInstanceState);
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog().build());
  StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectLeakedSqlLiteObjects().detectLeakedClosableObjects().penaltyLog().penaltyDeath().build());
  RootTools.debugMode=true;
  mTextView=new TextView(this);
  mTextView.setText("");
  mScrollView=new ScrollView(this);
  mScrollView.addView(mTextView);
  setContentView(mScrollView);
  String version="?";
  try {
    PackageInfo packageInfo=this.getPackageManager().getPackageInfo(this.getPackageName(),0);
    version=packageInfo.versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  print("SanityCheckRootTools v " + version + "\n\n");
  if (RootTools.isRootAvailable()) {
    print("Root found.\n");
  }
 else {
    print("Root not found");
  }
  try {
    Shell.startRootShell();
  }
 catch (  IOException e2) {
    e2.printStackTrace();
  }
catch (  TimeoutException e) {
    print("[ TIMEOUT EXCEPTION! ]\n");
    e.printStackTrace();
  }
catch (  RootDeniedException e) {
    print("[ ROOT DENIED EXCEPTION! ]\n");
    e.printStackTrace();
  }
  try {
    if (!RootTools.isAccessGiven()) {
      print("ERROR: No root access to this device.\n");
      return;
    }
  }
 catch (  Exception e) {
    print("ERROR: could not determine root access to this device.\n");
    return;
  }
  mPDialog=new ProgressDialog(this);
  mPDialog.setCancelable(false);
  mPDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
  new SanityCheckThread(this,new TestHandler()).start();
}
