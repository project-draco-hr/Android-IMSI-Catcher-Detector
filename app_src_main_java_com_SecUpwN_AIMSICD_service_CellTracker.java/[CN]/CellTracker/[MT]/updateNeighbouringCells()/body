{
  List<Cell> neighboringCells=new ArrayList<>();
  List<NeighboringCellInfo> neighboringCellInfo=tm.getNeighboringCellInfo();
  if (neighboringCellInfo == null)   neighboringCellInfo=new ArrayList<>();
  Boolean nclp=tinydb.getBoolean("nc_list_present");
  if (neighboringCellInfo != null && neighboringCellInfo.size() == 0 && nclp) {
    Log.i(TAG,mTAG + ": neighbouringCellInfo is empty: start polling...");
    neighboringCellBlockingQueue=new LinkedBlockingQueue<>(100);
    if (Build.VERSION.SDK_INT > 17) {
      DeviceApi18.startListening(tm,phoneStatelistener);
    }
 else {
      tm.listen(phoneStatelistener,PhoneStateListener.LISTEN_CELL_LOCATION | PhoneStateListener.LISTEN_CELL_INFO | PhoneStateListener.LISTEN_DATA_CONNECTION_STATE| PhoneStateListener.LISTEN_SERVICE_STATE| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
    }
    for (int i=0; i < 10 && neighboringCellInfo.size() == 0; i++) {
      try {
        Log.d(TAG,mTAG + ": neighbouringCellInfo empty: trying " + i);
        NeighboringCellInfo info=neighboringCellBlockingQueue.poll(1,TimeUnit.SECONDS);
        if (info == null) {
          neighboringCellInfo=tm.getNeighboringCellInfo();
          if (neighboringCellInfo != null)           if (neighboringCellInfo.size() > 0) {
            Log.d(TAG,mTAG + ": neighbouringCellInfo found on " + i+ " try. (time based)");
            break;
          }
 else {
            continue;
          }
        }
        ArrayList<NeighboringCellInfo> cellInfoList=new ArrayList<>(neighboringCellBlockingQueue.size() + 1);
        while (info != null) {
          cellInfoList.add(info);
          info=neighboringCellBlockingQueue.poll(1,TimeUnit.SECONDS);
        }
        neighboringCellInfo=cellInfoList;
      }
 catch (      InterruptedException e) {
      }
    }
  }
  for (  NeighboringCellInfo neighbourCell : neighboringCellInfo) {
    Log.i(TAG,mTAG + ": neighbouringCellInfo -" + " LAC:"+ neighbourCell.getLac()+ " CID:"+ neighbourCell.getCid()+ " PSC:"+ neighbourCell.getPsc()+ " RSSI:"+ neighbourCell.getRssi());
    final Cell cell=new Cell(neighbourCell.getCid(),neighbourCell.getLac(),neighbourCell.getRssi(),neighbourCell.getPsc(),neighbourCell.getNetworkType(),false);
    neighboringCells.add(cell);
  }
  return neighboringCells;
}
